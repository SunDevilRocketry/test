        -:    0:Source:../../../mod/servo/servo.c
        -:    0:Graph:build/servo.gcno
        -:    0:Data:build/servo.gcda
        -:    0:Runs:1
        -:    1:/*******************************************************************************
        -:    2:*
        -:    3:* FILE: 
        -:    4:* 		servo.c
        -:    5:*
        -:    6:* DESCRIPTION: 
        -:    7:* 		Contains API functions to get access to the servo motors driver
        -:    8:*
        -:    9:*******************************************************************************/
        -:   10:
        -:   11:
        -:   12:/*------------------------------------------------------------------------------
        -:   13: Standard Includes                                                                     
        -:   14:------------------------------------------------------------------------------*/
        -:   15:
        -:   16:
        -:   17:/*------------------------------------------------------------------------------
        -:   18: Project Includes                                                                     
        -:   19:------------------------------------------------------------------------------*/
        -:   20:#include "main.h"
        -:   21:#include "sdr_pin_defines_A0002.h"
        -:   22:#include "servo.h"
        -:   23:#include "led.h"
        -:   24:#include "init.h"
        -:   25:#include "usb.h"
        -:   26:/*------------------------------------------------------------------------------
        -:   27: Global Variables 
        -:   28:------------------------------------------------------------------------------*/
        -:   29:#define SER_PER 0.55555
        -:   30:
        -:   31:extern SERVO_PRESET servo_preset;
        -:   32:
        -:   33:/*------------------------------------------------------------------------------
        -:   34: Procedures 
        -:   35:------------------------------------------------------------------------------*/
        -:   36:
        -:   37:/*******************************************************************************
        -:   38:*                                                                              *
        -:   39:* PROCEDURE:                                                                   * 
        -:   40:* 		servo_init                                                             *
        -:   41:*                                                                              *
        -:   42:* DESCRIPTION:                                                                 * 
        -:   43:* 		Initialize/Reset servo                             *
        -:   44:*                                                                              *
        -:   45:*******************************************************************************/
        3:   46:SERVO_STATUS servo_init()
        -:   47:{
        -:   48:    // GPIO Initialization
        3:   49:    HAL_GPIO_WritePin(MOTOR1_EN_PORT, MOTOR1_EN, GPIO_PIN_SET);
        3:   50:    HAL_GPIO_WritePin(MOTOR2_EN_PORT, MOTOR2_EN, GPIO_PIN_SET);
        3:   51:    HAL_GPIO_WritePin(MOTOR3_EN_PORT, MOTOR3_EN, GPIO_PIN_SET);
        3:   52:    HAL_GPIO_WritePin(MOTOR4_EN_PORT, MOTOR4_EN, GPIO_PIN_SET);
        -:   53:
        -:   54:    // Timer intialization
        3:   55:    HAL_StatusTypeDef hal_status1, hal_status2, hal_status3, hal_status4;
        -:   56:
        3:   57:    hal_status1 = HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
        3:   58:    hal_status2 = HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
        3:   59:    hal_status3 = HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
        3:   60:    hal_status4 = HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
        -:   61:
        3:   62:    if ( hal_status1 == HAL_OK &&
        -:   63:        hal_status2 == HAL_OK &&
        3:   64:        hal_status3 == HAL_OK &&
        -:   65:        hal_status4 == HAL_OK )
        -:   66:        {
        -:   67:        return SERVO_OK;
        -:   68:        }
        -:   69:        else
        -:   70:        {
        2:   71:        return SERVO_FAIL;
        -:   72:        }
        -:   73:}
        -:   74:
        -:   75:
        -:   76:/*******************************************************************************
        -:   77:*                                                                              *
        -:   78:* PROCEDURE:                                                                   * 
        -:   79:* 		servo_reset                                                             *
        -:   80:*                                                                              *
        -:   81:* DESCRIPTION:                                                                 * 
        -:   82:* 		Initialize/Reset servo rotate to default                               *
        -:   83:*                                                                              *
        -:   84:*******************************************************************************/
    #####:   85:void servo_reset()
        -:   86:{
    #####:   87:    motor1_drive(servo_preset.rp_servo1);
    #####:   88:    motor2_drive(servo_preset.rp_servo2);
    #####:   89:    motor3_drive(servo_preset.rp_servo3);
    #####:   90:    motor4_drive(servo_preset.rp_servo4);
    #####:   91:}
        -:   92:
        -:   93:
        -:   94:/*******************************************************************************
        -:   95:*                                                                              *
        -:   96:* PROCEDURE:                                                                   * 
        -:   97:* 		motor1_pwm_drive                                                           *
        -:   98:*                                                                              *
        -:   99:* DESCRIPTION:                                                                 * 
        -:  100:* 		Drive the first servo motor with a desired value (250-1250)            *
        -:  101:*                                                                              *
        -:  102:*******************************************************************************/
    #####:  103:void motor1_pwm_drive(uint8_t pulse)
        -:  104:{
    #####:  105:    htim3.Instance->CCR4 = pulse;
    #####:  106:}
        -:  107:
        -:  108:/*******************************************************************************
        -:  109:*                                                                              *
        -:  110:* PROCEDURE:                                                                   * 
        -:  111:* 		motor2_pwm_drive                                                           *
        -:  112:*                                                                              *
        -:  113:* DESCRIPTION:                                                                 * 
        -:  114:* 		Drive the second servo motor with a desired value (250-1250)           *
        -:  115:*                                                                              *
        -:  116:*******************************************************************************/
    #####:  117:void motor2_pwm_drive(uint8_t pulse)
        -:  118:{
    #####:  119:    htim3.Instance->CCR3 = pulse;
    #####:  120:}
        -:  121:
        -:  122:/*******************************************************************************
        -:  123:*                                                                              *
        -:  124:* PROCEDURE:                                                                   * 
        -:  125:* 		motor3_pwm_drive                                                           *
        -:  126:*                                                                              *
        -:  127:* DESCRIPTION:                                                                 * 
        -:  128:* 		Drive the third servo motor with a desired value (250-1250)            *
        -:  129:*                                                                              *
        -:  130:*******************************************************************************/
    #####:  131:void motor3_pwm_drive(uint8_t pulse)
        -:  132:{
    #####:  133:    htim3.Instance->CCR1 = pulse;
        -:  134:
    #####:  135:}
        -:  136:
        -:  137:/*******************************************************************************
        -:  138:*                                                                              *
        -:  139:* PROCEDURE:                                                                   * 
        -:  140:* 		motor4_pwm_drive                                                           *
        -:  141:*                                                                              *
        -:  142:* DESCRIPTION:                                                                 * 
        -:  143:* 		Drive the forth servo motor with a desired value (250-1250)            *
        -:  144:*                                                                              *
        -:  145:*******************************************************************************/
    #####:  146:void motor4_pwm_drive(uint8_t pulse)
        -:  147:{
    #####:  148:    htim2.Instance->CCR1 = pulse;
    #####:  149:}
        -:  150:
        -:  151:
        -:  152:/*******************************************************************************
        -:  153:*                                                                              *
        -:  154:* PROCEDURE:                                                                   * 
        -:  155:* 		motor1_drive                                                           *
        -:  156:*                                                                              *
        -:  157:* DESCRIPTION:                                                                 * 
        -:  158:* 		Drive the first servo motor with a desired angle (0-180)            *
        -:  159:*                                                                              *
        -:  160:*******************************************************************************/
    #####:  161:void motor1_drive(uint8_t angle)
        -:  162:{
    #####:  163:    uint8_t pulse = angle_to_pulse(motor_snap_to_bound(angle, 180, 0));
    #####:  164:    htim3.Instance->CCR4 = pulse;
    #####:  165:}
        -:  166:
        -:  167:/*******************************************************************************
        -:  168:*                                                                              *
        -:  169:* PROCEDURE:                                                                   * 
        -:  170:* 		motor2_drive                                                           *
        -:  171:*                                                                              *
        -:  172:* DESCRIPTION:                                                                 * 
        -:  173:* 		Drive the second servo motor with a desired angle (0-180)              *
        -:  174:*                                                                              *
        -:  175:*******************************************************************************/
    #####:  176:void motor2_drive(uint8_t angle)
        -:  177:{
    #####:  178:    uint8_t pulse = angle_to_pulse(motor_snap_to_bound(angle, 180, 0));
    #####:  179:    htim3.Instance->CCR3 = pulse;
    #####:  180:}
        -:  181:
        -:  182:/*******************************************************************************
        -:  183:*                                                                              *
        -:  184:* PROCEDURE:                                                                   * 
        -:  185:* 		motor3_drive                                                           *
        -:  186:*                                                                              *
        -:  187:* DESCRIPTION:                                                                 * 
        -:  188:* 		Drive the third servo motor with a desired angle (0-180)               *
        -:  189:*                                                                              *
        -:  190:*******************************************************************************/
    #####:  191:void motor3_drive(uint8_t angle)
        -:  192:{
    #####:  193:    uint8_t pulse = angle_to_pulse(motor_snap_to_bound(angle, 180, 0));
    #####:  194:    htim3.Instance->CCR1 = pulse;
    #####:  195:}
        -:  196:
        -:  197:/*******************************************************************************
        -:  198:*                                                                              *
        -:  199:* PROCEDURE:                                                                   * 
        -:  200:* 		motor4_drive                                                           *
        -:  201:*                                                                              *
        -:  202:* DESCRIPTION:                                                                 * 
        -:  203:* 		Drive the forth servo motor with a desired angle (0-180)               *
        -:  204:*                                                                              *
        -:  205:*******************************************************************************/
    #####:  206:void motor4_drive(uint8_t angle)
        -:  207:{
    #####:  208:    uint8_t pulse = angle_to_pulse(motor_snap_to_bound(angle, 180, 0));
    #####:  209:    htim2.Instance->CCR1 = pulse;
    #####:  210:}
        -:  211:
        -:  212:/*******************************************************************************
        -:  213:*                                                                              *
        -:  214:* PROCEDURE:                                                                   * 
        -:  215:* 		motors_drive                                                           *
        -:  216:*                                                                              *
        -:  217:* DESCRIPTION:                                                                 * 
        -:  218:* 		A complete function that drives all servos in this board                *
        -:  219:*                                                                              *
        -:  220:*******************************************************************************/
    #####:  221:void motors_drive(uint8_t angle)
        -:  222:{
    #####:  223:    uint8_t turn_degree1 = angle + servo_preset.rp_servo1;
    #####:  224:    uint8_t turn_degree2 = angle + servo_preset.rp_servo2;
    #####:  225:    uint8_t turn_degree3 = angle + servo_preset.rp_servo3;
    #####:  226:    uint8_t turn_degree4 = angle + servo_preset.rp_servo4;
        -:  227:
    #####:  228:    motor1_drive(turn_degree1);
    #####:  229:    motor2_drive(turn_degree2);
    #####:  230:    motor3_drive(turn_degree3);
    #####:  231:    motor4_drive(turn_degree4);
    #####:  232:}
        -:  233:
    #####:  234:SERVO_STATUS servo_cmd_execute(uint8_t subcommand){
    #####:  235:    USB_STATUS usb_status;
        -:  236:
    #####:  237:    switch (subcommand){
    #####:  238:        case SERVO_SWEEP:
        -:  239:        {
    #####:  240:            uint8_t degree;
    #####:  241:            usb_status = usb_receive(&degree, sizeof(uint8_t), 1000);
    #####:  242:            motors_drive(degree);
    #####:  243:            if (usb_status == USB_OK) 
        -:  244:                {
        -:  245:                return SERVO_OK;
        -:  246:                }
        -:  247:            else
        -:  248:                {
    #####:  249:                led_set_color( LED_YELLOW );
    #####:  250:                HAL_Delay( 5000 );
    #####:  251:                return SERVO_FAIL;
        -:  252:                }
        -:  253:        }
    #####:  254:        case SERVO_RESET:
        -:  255:        {
    #####:  256:            servo_reset();
    #####:  257:            return SERVO_OK;
        -:  258:        }
        -:  259:        default:
        -:  260:            return SERVO_FAIL;
        -:  261:    }
        -:  262:}
        -:  263:
        -:  264:/*******************************************************************************
        -:  265:*                                                                              *
        -:  266:* PROCEDURE:                                                                   * 
        -:  267:* 		angle_to_pulse                                                         *
        -:  268:*                                                                              *
        -:  269:* DESCRIPTION:                                                                 * 
        -:  270:* 		Convert turn angle degree into PWM pulse                               *
        -:  271:*                                                                              *
        -:  272:*******************************************************************************/
    #####:  273:uint8_t angle_to_pulse(uint8_t angle)
        -:  274:{
    #####:  275:    return 25 + (angle*SER_PER);
        -:  276:}
        -:  277:
    #####:  278:uint8_t motor_snap_to_bound(uint8_t angle, uint8_t upper, uint8_t lower)
        -:  279:{
    #####:  280:    if (angle >= lower && angle <= upper) {
        -:  281:        return angle;
    #####:  282:    } else if (angle > upper && servo_preset.rp_servo1 <= (upper + ((255 - upper) / 2))) {
        -:  283:        return upper;
        -:  284:    } else {
    #####:  285:        return lower;
        -:  286:    }
        -:  287:}
